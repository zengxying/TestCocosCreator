import { Mat4, Quat, Rect, size, Size, v2, v3, Vec2, Vec3 } from 'cc';
import { EcsComponent } from '../../ecs/EcsComponent';
import { ecsclass, IEntity } from '../../util/EcsObject';

export interface IAttrReadonly {
    readonly uuid: number
    readonly isValid: boolean
    readonly ecsName: string
    readonly allowMultiple: boolean
    readonly allowRecycling: boolean

    readonly refreshOpacity: boolean
    readonly refreshAngle: boolean
    readonly refreshSize: boolean
    readonly refreshAnchor: boolean
    readonly refreshScale: boolean
    readonly refreshPosition: boolean

    readonly boundingBox: Readonly<Rect>
    readonly minX: number
    readonly minY: number
    readonly maxX: number
    readonly maxY: number
}

interface ILikeSize {
    readonly width: number,
    readonly height: number
}

interface ILikeV2 {
    readonly x: number,
    readonly y: number
}

interface ILikeV3 {
    readonly x: number,
    readonly y: number,
    readonly z: number
}

@ecsclass('AttrComponent')
/**
 * 负责位置、尺寸、缩放、透明度、锚点、显隐、旋转
 */
export class AttrComponent<T extends IEntity = IEntity> extends EcsComponent<T> {
    static allowRecycling: boolean = true;
    protected onDisable() {
        this.reset();
    }

    public reset() {
        this.$active = true;
        this.$position.set(0, 0, 0);
        this.$scale.set(1, 1, 1);
        this.$anchorPoint.set(0.5, 0.5);
        this.$contentSize.set(0, 0);
        this.$opacity = 255;
        this.$lrot = new Quat();
        this.$euler.set(0, 0, 0);
        this._refreshOpacity = false;
        this._refreshAngle = false;
        this._refreshSize = false;
        this._refreshAnchor = false;
        this._refreshScale = false;
        this._refreshPosition = false;
    }

    private _refreshOpacity: boolean = false;
    /**刷新透明度 */
    public get refreshOpacity(): boolean {
        return this._refreshOpacity;
    }
    private _refreshAngle: boolean = false;
    /**刷新旋转 */
    public get refreshAngle(): boolean {
        return this._refreshAngle;
    }
    private _refreshSize: boolean = false;
    /**刷新尺寸 */
    public get refreshSize(): boolean {
        return this._refreshSize;
    }
    private _refreshAnchor: boolean = false;
    /**刷新锚点 */
    public get refreshAnchor(): boolean {
        return this._refreshAnchor;
    }
    private _refreshScale: boolean = false;
    /**刷新缩放 */
    public get refreshScale(): boolean {
        return this._refreshScale;
    }
    private _refreshPosition: boolean = false;
    /**刷新位置 */
    public get refreshPosition(): boolean {
        return this._refreshPosition;
    }

    // active
    protected $active = true;
    /**active */
    public get active() {
        return this.$active;
    }
    public set active(value) {
        this.$active = value;
    }

    // 坐标
    protected $position: Vec3 = v3();
    /**坐标 */
    public get position(): ILikeV3 {
        return this.$position;
    }
    /**x坐标 */
    public get x(): number {
        return this.$position.x;
    }
    public set x(value: number) {
        this._refreshPosition = true;
        this.$position.x = value;
    }
    /**y坐标 */
    public get y(): number {
        return this.$position.y;
    }
    public set y(value: number) {
        this._refreshPosition = true;
        this.$position.y = value;
    }
    /**z坐标 */
    public get z(): number {
        return this.$position.z;
    }
    public set z(value: number) {
        this._refreshPosition = true;
        this.$position.z = value;
    }

    // 缩放
    protected $scale: Vec3 = v3(1, 1, 1);
    /**缩放 */
    public get scale(): ILikeV3 {
        return this.$scale;
    }
    /**缩放x */
    public get scaleX(): number {
        return this.$scale.x;
    }
    public set scaleX(value: number) {
        this._refreshScale = true;
        this.$scale.x = value;
    }
    /**缩放y */
    public get scaleY(): number {
        return this.$scale.y;
    }
    public set scaleY(value: number) {
        this._refreshScale = true;
        this.$scale.y = value;
    }
    /**缩放z */
    public get scaleZ(): number {
        return this.$scale.z;
    }
    public set scaleZ(value: number) {
        this._refreshScale = true;
        this.$scale.z = value;
    }

    // 锚点
    protected $anchorPoint: Vec2 = v2(0.5, 0.5);
    /**锚点 */
    public get anchorPoint(): ILikeV2 {
        return this.$anchorPoint;
    }
    /**锚点x */
    public get anchorX(): number {
        return this.$anchorPoint.x;
    }
    public set anchorX(value: number) {
        this._refreshAnchor = true;
        this.$anchorPoint.x = value;
    }
    /**锚点y */
    public get anchorY(): number {
        return this.$anchorPoint.y;
    }
    public set anchorY(value: number) {
        this._refreshAnchor = true;
        this.$anchorPoint.y = value;
    }

    // 尺寸
    protected $contentSize: Size = size();
    /**尺寸 */
    public get contentSize(): ILikeSize {
        return this.$contentSize;
    }
    /**宽 */
    public get width(): number {
        return this.$contentSize.width;
    }
    public set width(value: number) {
        this._refreshSize = true;
        this.$contentSize.width = value;
    }
    /**高 */
    public get height(): number {
        return this.$contentSize.height;
    }
    public set height(value: number) {
        this._refreshSize = true;
        this.$contentSize.height = value;
    }

    protected $opacity: number = 255;
    /**透明度 */
    public get opacity(): number {
        return this.$opacity;
    }
    public set opacity(value: number) {
        this._refreshOpacity = true;
        this.$opacity = value;

    }

    // 旋转四元数
    protected $lrot = new Quat();
    /**本地坐标系下的旋转，用四元数表示 */
    private get rotation(): Readonly<Quat> {
        return this.$lrot;
    }
    private set rotation(val) {
        Quat.copy(this.$lrot, val);
        Quat.toEuler(this.$euler, this.$lrot);
    }

    // 旋转欧拉角
    protected $euler: Vec3 = v3();
    /**本地坐标系下的旋转，用欧拉角表示 */
    private get eulerAngles(): Readonly<Vec3> {
        return this.$euler;
    }
    private set eulerAngles(val) {
        Vec3.copy(this.$euler, val);
        Quat.fromEuler(this.$lrot, val.x, val.y, val.z);
    }

    /**本地坐标系下的旋转，用欧拉角表示，但是限定在 z 轴上 */
    public get angle(): number {
        return this.$euler.z;
    }
    public set angle(value: number) {
        this._refreshAngle = true;
        this.$euler.z = value;
        Quat.fromAngleZ(this.$lrot, value);
    }

    // 变换矩阵
    private _temp_matrix = new Mat4();  // 临时变量
    /**碰撞盒 */
    get boundingBox(): Readonly<Rect> {
        Mat4.fromRTS(this._temp_matrix, this.$lrot, this.$position, this.$scale);
        const rect = new Rect(
            -this.anchorX * this.width * this.scaleX,
            -this.anchorY * this.height * this.scaleY,
            this.width * this.scaleX,
            this.height * this.scaleY
        );
        rect.transformMat4(this._temp_matrix);
        return rect;
    }

    /**最小x坐标(不计算旋转) */
    get minX() {
        return this.x - this.width * this.anchorX * this.scaleX;
    }
    /**最小y坐标(不计算旋转) */
    get minY() {
        return this.y - this.height * this.anchorY * this.scaleY;
    }
    /**最大x坐标(不计算旋转) */
    get maxX() {
        return this.x + this.width * (1 - this.anchorX) * this.scaleX;
    }
    /**最大y坐标(不计算旋转) */
    get maxY() {
        return this.y + this.height * (1 - this.anchorY) * this.scaleY;
    }

    public setPosition(x: number, y: number, z: number = this.z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }

    public addPosition(x: number, y: number, z: number = 0) {
        this.x += x;
        this.y += y;
        this.z += z;
        return this;
    }

    public setScale(x: number, y: number, z: number = this.scaleZ) {
        this.scaleX = x;
        this.scaleY = y;
        this.scaleZ = z;
        return this;
    }

    public addScale(x: number, y: number, z: number = 0) {
        this.scaleX += x;
        this.scaleY += y;
        this.scaleZ += z;
        return this;
    }

    public setAngle(angle: number) {
        this.angle = angle;
        return this;
    }

    public addAngle(angle: number) {
        this.angle += angle;
        return this;
    }

    public setContentSize(width: number, height: number) {
        this.width = width;
        this.height = height;
        return this;
    }

    public addContentSize(width: number, height: number) {
        this.width += width;
        this.height += height;
        return this;
    }

    public setAnchorPoints(x: number, y: number) {
        this.anchorX = x;
        this.anchorY = y;
        return this;
    }

    public addAnchorPoints(x: number, y: number) {
        this.anchorX += x;
        this.anchorY += y;
        return this;
    }

    /**************************以下为系统调用**************************/
    static innerHandle(attr: AttrComponent) {
        // 重置
        attr._refreshAnchor = false;
        attr._refreshAngle = false;
        attr._refreshOpacity = false;
        attr._refreshPosition = false;
        attr._refreshSize = false;
        attr._refreshScale = false;
    }
}