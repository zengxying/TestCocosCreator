import { error, Node } from 'cc';
import { classManager, componentCache, EcsBaseComponent, EcsBaseEntity, flagManager, IComponent, IComponentName, IECS, IEntity, ITypeofComponent } from '../util/EcsObject';
import { ArrayMap } from '../util/EcsUtils';
import { EcsComponent } from './EcsComponent';

export class EcsEntity extends EcsBaseEntity implements IEntity {
    /**位运算 */
    private flag: number[] = new Array(flagManager.bits).fill(0);

    /**组件的名字 => 组件数组 */
    private instNameToComps: ArrayMap<IComponentName, IComponent> = new ArrayMap();

    /**组件父类的名字 => 组件数组 */
    private superNameToComps: ArrayMap<IComponentName, IComponent> = new ArrayMap();

    private _isValid = false;
    /**是否有效 */
    public get isValid() {
        return this._isValid;
    }
    private set isValid(value) {
        this._isValid = value;
    }

    private _enabled = true;
    /**标记是否生效 */
    public get enabled() {
        return this._enabled;
    }
    public set enabled(value) {
        this._enabled = value;
    }

    /**指定ecs */
    private _ecs: IECS = null!;
    /**获取对应的ecs */
    protected get ecs() {
        return this._ecs;
    }
    private set ecs(v) {
        this._ecs = v;
    }

    /**节点 */
    private _node: Node | null = null;
    public get node() {
        return this._node;
    }
    private set node(value: Node | null) {
        this._node = value;
    }

    /**标记是否已经销毁 */
    private isDestroyed = true;

    /**
     * 内部初始化函数
     */
    protected innerInit(ecs: IECS, node: Node | null = null) {
        if (!this.isDestroyed) return;
        this.isDestroyed = false;

        this.ecs = ecs;
        this.node = node;
        this.isValid = true;
        this.enabled = true;
        //@ts-ignore
        this.ecs.addEntity(this);
        this.onEnable();
    }

    /**
     * 添加组件(内部调用)
     */
    protected innerAddComponent(com: IComponent, tag: number | null = null) {
        // 组件类名字
        const componentName = com.ecsName;

        // 添加父类名字到uuid的转换
        classManager.eachSuperName(componentName, (superName) => {
            this.superNameToComps.add(superName, com);
        });

        // 添加名字到uuid的转换
        const len = this.instNameToComps.add(componentName, com);

        // 新增标记位
        if (len === 1) flagManager.addFlag(this.flag, flagManager.getAllByName(componentName));

        EcsComponent.onEnable(com, this, tag);

        return true;
    }

    /**
     * 移除组件(内部调用)
     */
    protected innerRemoveComponent(com: IComponent, tag: number | null = null) {
        if (com.entity !== this) return false;

        // 组件类名字
        const componentName = com.ecsName;

        // 权柄不同，无法移除
        if (com.tag !== tag) return false;

        // 删除父类名字到uuid的转换
        classManager.eachSuperName(componentName, (superName) => {
            this.superNameToComps.sub(superName, com);
        });

        // 删除名字到uuid的转换
        const del = this.instNameToComps.subDel(componentName, com);

        // 更新标记位
        if (del) this.updateFlag();

        EcsComponent.onDisable(com);

        return true;
    }

    /**
     * 根据组件名字获取对应的组件数组(先查inst再查询super)
     */
    private getCompsByName(componentName: string) {
        const instComps = this.instNameToComps.get(componentName);
        if (instComps && instComps.length) {
            return instComps;
        }

        const superComps = this.superNameToComps.get(componentName);
        if (superComps) {
            return superComps;
        }

        this.getCompsByNameCache.length = 0;
        return this.getCompsByNameCache;
    }
    /**
     * 根据组件名字获取对应的组件数组(先查inst再查询super)
     */
    private getCompsByName2(componentName: string) {
        this.getCompsByNameCache.length = 0;
        const instComps = this.instNameToComps.get(componentName);
        if (instComps && instComps.length) {
            Array.prototype.push.apply(this.getCompsByNameCache, instComps);
        }

        const superComps = this.superNameToComps.get(componentName);
        if (superComps && superComps.length) {
            Array.prototype.push.apply(this.getCompsByNameCache, superComps);
        }

        return this.getCompsByNameCache;
    }
    private getCompsByNameCache: IComponent[] = [];

    /**
     * 更新flag
     */
    private updateFlag() {
        this.instNameToComps.keys(this.updateFlagCache);
        this.flag = flagManager.getAllByNames(this.updateFlagCache, this.flag);
        this.updateFlagCache.length = 0;
    }
    private updateFlagCache: IComponentName[] = [];

    /**
     * 移除当前所有组件
     */
    private clear() {
        const keys: string[] = [];
        this.instNameToComps.keys(keys);

        for (let index = keys.length - 1; index >= 0; index--) {
            const comps = this.instNameToComps.get(keys[index]);
            for (let index = comps.length - 1; index >= 0; index--) {
                const com = comps[index];
                this.removeComponent(com, com.tag);
            }
        }

        this.flag.fill(0);
        this.instNameToComps.clear();
        this.superNameToComps.clear();

        this.updateFlagCache.length = 0;
        this.checkFlagOnlyCache.length = 0;
        this.getCompsByNameCache.length = 0;
    }

    /**
     * 销毁
     * 会在触发onDisable和移除所有组件之后才会isValid设为false
     */
    public destroy() {
        if (this.isDestroyed) return false;
        this.isDestroyed = true;

        this.onDisable();
        this.clear();
        this.node = null;
        this.isValid = false;
        // @ts-ignore
        this.ecs.removeEntity(this);
        this.ecs = null;
        return true;
    }

    /**
     * 杀死
     * 与destroy的区别是，kill会在触发onDisable和移除所有组件之前就将isValid设为false
     */
    public kill() {
        this.isValid = false;
        return this.destroy();
    }

    protected onEnable() { }

    protected onDisable() { }

    /**
     * 检查是否包含全部
     */
    checkFlagAll(flag: number[]) {
        return flagManager.checkFlagAll(this.flag, flag);

    }
    /**
     * 检查是否包含任一
     */
    checkFlagAny(flag: number[]) {
        return flagManager.checkFlagAny(this.flag, flag);
    }

    /**
     * 检查是否仅包含全部
     */
    checkFlagOnly(flag: number[]) {
        const componentNames = this.instNameToComps.keys(this.checkFlagOnlyCache);
        for (let index = 0; index < componentNames.length; index++) {
            const componentName = componentNames[index];
            const comFlag = flagManager.getAllByName(componentName);
            const success = flagManager.checkFlagAny(comFlag, flag);
            if (!success) {
                componentNames.length = 0;
                return false;
            }
        }
        componentNames.length = 0;
        return true;
    }
    private checkFlagOnlyCache: string[] = [];

    /**
     * 添加相应类型的组件
     * @see 同add
     * @param param 类型
     * @param tag 标签
     */
    addComponent<T extends ITypeofComponent>(param: T | IComponent, tag: number | null = null): InstanceType<T> {
        return this.add(param, tag);
    }

    /**
     * 添加相应类型的组件
     * @param param 类型
     * @param tag 标签
     */
    add<T extends ITypeofComponent>(param: T | IComponent, tag: number | null = null): InstanceType<T> {
        if (param.ecsName === 'EcsBase') {
            console.error('请使用ecsclass修饰Component', param);
            return null;
        }

        // 是实例
        if (param instanceof EcsBaseComponent) {
            if (param.entity === this) {
                error(`不可重复添加同一个组件实例\nuuid:    ${param.uuid}\n组件名:   ${param.ecsName}`);
            } else {
                // @ts-ignore
                this.ecs.addComponent(this, param, tag);
            }
            return param as InstanceType<T>;
        } else {
            // 如果不允许重复添加
            if (!param.allowMultiple) {
                if (tag !== null) {
                    error(`当前组件不允许重复添加，不可以设置它的权柄\n组件名:   ${param.ecsName}\n解决方法: 在当前组件类中添加static disallowMultiple = true; 或 去除target参数`);
                    tag = null;
                }
                const comps = this.instNameToComps.get(param.ecsName);
                if (comps && comps.length) {
                    return comps[0] as InstanceType<T>;
                }
            }
            const com = componentCache.get(param.ecsName) || new param();
            // @ts-ignore
            this.ecs.addComponent(this, com, tag);
            return com as InstanceType<T>;
        }
    }

    /**
     * 移除相应类型的第一个组件
     * @see 同remove
     * @param param 类型
     * @param tag 标签
     */
    removeComponent(param: ITypeofComponent | IComponent, tag: number | null = null): boolean {
        return this.remove(param, tag);
    }

    /**
     * 移除相应类型的第一个组件
     * @param param 类型
     * @param tag 标签
     */
    remove(param: ITypeofComponent | IComponent, tag: number | null = null): boolean {
        if (!param) return false;

        if (param instanceof EcsBaseComponent) {
            //@ts-ignore
            const result = this.ecs.removeComponent(param, tag) as boolean;
            if (result && param.allowRecycling) {
                EcsBaseComponent.updateUUID(param);
                componentCache.put(param.ecsName, param);
            }
            return result;
        } else {
            const com = this.get(param, tag);
            //@ts-ignore
            const result = !!com && this.ecs.removeComponent(com, tag) as boolean;
            if (result && param.allowRecycling) {
                EcsBaseComponent.updateUUID(com);
                componentCache.put(param.ecsName, com);
            }
            return result;
        }
    }

    /**
     * 移除相应组件的所有组件
     * @see 同removeAll
     * @param Com 类型
     * @param tag 标签
     */
    removeComponents(Com: ITypeofComponent, tag: number | null = null): boolean {
        const comps = this.getComponents(Com, tag);
        if (!comps.length) return false;

        return comps.every((com) => {
            return this.removeComponent(com, tag);
        });
    }

    /**
     * 移除相应组件的所有组件
     * @param Com 类型
     * @param tag 标签
     */
    removeAll(Com: ITypeofComponent, tag: number | null = null): boolean {
        const comps = this.getComponents(Com, tag);
        if (!comps.length) return false;

        return comps.every((com) => {
            return this.removeComponent(com, tag);
        });
    }

    /**
     * 有没有相应类型的组件(绑定权柄的组件也能获取到)
     * @see 同has
     * @param Com 类型
     * @param tag 标签
     */
    hasComponent(Com: ITypeofComponent, tag: number | null = null): boolean {
        const comps = this.getCompsByName(Com.ecsName);
        if (!comps || comps.length === 0) return false;

        if (tag === null) return true;

        return comps.some((com) => com.tag === tag);
    }

    /**
     * 有没有相应类型的组件(绑定权柄的组件也能获取到)
     * @param Com 类型
     * @param tag 标签
     */
    has(Com: ITypeofComponent, tag: number | null = null): boolean {
        const comps = this.getCompsByName(Com.ecsName);
        if (!comps || comps.length === 0) return false;

        if (tag === null) return true;

        return comps.some((com) => {
            return com.tag === tag;
        });
    }

    /**
     * 获取相应类型的组件(绑定权柄的组件也能获取到)
     * @see 同get
     * @param Com 类型
     * @param tag 标签
     */
    getComponent<T extends ITypeofComponent>(Com: T, tag: number | null = null): InstanceType<T> {
        if (tag === null) {
            const comps = this.getCompsByName(Com.ecsName);
            if (!comps || comps.length === 0) return null;
            return comps[0] as InstanceType<T>;
        } else {
            const comps = this.getCompsByName2(Com.ecsName);
            if (!comps || comps.length === 0) return null;
            return comps.find(comp => comp.tag === tag) as InstanceType<T> || null;
        }
    }

    /**
     * 获取相应类型的组件(绑定权柄的组件也能获取到)
     * @param Com 类型
     * @param tag 标签
     */
    get<T extends ITypeofComponent>(Com: T, tag: number | null = null): InstanceType<T> {
        if (tag === null) {
            const comps = this.getCompsByName(Com.ecsName);
            if (!comps || comps.length === 0) return null;
            return comps[0] as InstanceType<T>;
        } else {
            const comps = this.getCompsByName2(Com.ecsName);
            if (!comps || comps.length === 0) return null;
            return comps.find(comp => comp.tag === tag) as InstanceType<T> || null;
        }
    }

    /**
     * 获取相应类型的组件(绑定权柄的组件也能获取到)
     * @see 同getAll
     * @param Com 类型
     * @param tag 标签
     */
    getComponents<T extends ITypeofComponent>(Com: T, tag: number | null = null): InstanceType<T>[] {
        return this.getAll(Com, tag);
    }

    /**
     * 获取相应类型的组件(绑定权柄的组件也能获取到)
     * @param Com 类型
     * @param tag 标签
     */
    getAll<T extends ITypeofComponent>(Com: T, tag: number | null = null): InstanceType<T>[] {
        const out: InstanceType<T>[] = [];

        const comps = this.getCompsByName2(Com.ecsName);
        if (!comps || comps.length === 0) return out;

        if (tag === null) {
            Array.prototype.push.apply(out, comps);
        } else {
            comps.forEach((comp) => {
                if (comp.tag === tag) {
                    out.push(comp as InstanceType<T>);
                }
            });
        }

        return out;
    }
}
