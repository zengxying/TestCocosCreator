import { EcsBaseSystem, IComponent, IECS, IEntity, IEntityUUID, IFilter, ISystem, ITypeofComponent } from '../util/EcsObject';

export class EcsSystem extends EcsBaseSystem implements ISystem {
    /**
     * 指定ecsID
     */
    private _ecs: IECS = null;
    /**获取对应的ecs */
    protected get ecs() {
        return this._ecs;
    }
    private set ecs(v) {
        this._ecs = v;
    }

    /**
     * 指定ecsID
     */
    constructor(ecs: IECS) {
        super();
        this.ecs = ecs;
    }

    /**系统生效 */
    protected onEnable() { }

    /**系统失效 */
    protected onDisable() { }

    /**过滤实体的条件 */
    protected filter: IFilter = null;
    /**开启并配置filter后，才能响应onEntityEnter、onEntityLeave */
    protected openWatchEntities = false;
    /**开启openWatchEntities功能后用来记录数据 */
    private watchEntities: IEntityUUID[] = [];

    /**使用filter进行查询 */
    protected query<T extends IEntity>(): T[];
    protected query<T extends IEntity>(filter: IFilter): T[];
    protected query<T extends IComponent>(filter: IFilter, Comment: { new(): T }): T[];
    protected query<T>(filter?: IFilter, Comment?: ITypeofComponent): T[] {
        //@ts-ignore
        return this.ecs.query(filter || this.filter, Comment);
    }

    protected find<T extends IEntity>(): T;
    protected find<T extends IEntity>(filter: IFilter): T;
    protected find<T extends IComponent>(filter: IFilter, Comment: { new(): T }): T;
    protected find<T>(filter?: IFilter, Comment?: ITypeofComponent): T {
        //@ts-ignore
        return this.ecs.find(filter || this.filter, Comment);
    }

    protected exist(filter?: IFilter): boolean {
        //@ts-ignore
        return this.ecs.exist(filter || this.filter);
    }

    /**实体进入系统，会在execute流程最开始调用*/
    protected onEntityEnter(entities: IEntity[]) { entities; }

    /**实体离开系统，会在execute流程最开始调用*/
    protected onEntityLeave(entities: IEntityUUID[]) { entities; }

    // 由ecs.execute驱动
    protected executeWatch() {
        if (this.filter && this.openWatchEntities) {
            const entities = this.query();
            const entityUuids = entities.map(entity => entity.uuid);
            const leave = this.watchEntities.filter(uuid => {
                return entityUuids.indexOf(uuid) === -1;
            });
            const enter = entities.filter(entity => {
                return this.watchEntities.indexOf(entity.uuid) === -1;
            });
            this.watchEntities = entityUuids;
            this.onEntityLeave(leave);
            this.onEntityEnter(enter);
        }
    }
    /**
     * 在Move系统之后，Node系统之前运行
     */
    protected execute(dt?: number, ...args: any[]) { dt; args; }
    /**
     * 在Timer、Tween系统之后，Move系统之前运行
     */
    protected beforeExecute(dt?: number, ...args: any[]) { dt; args; }
    /**
     * 在Node系统之后，Render系统之前运行
     */
    protected afterExecute(dt?: number, ...args: any[]) { dt; args; }

    // 由ecs.update驱动
    protected update(dt?: number, ...args: any[]) { dt; args; }
    protected beforeUpdate(dt?: number, ...args: any[]) { dt; args; }
    protected afterUpdate(dt?: number, ...args: any[]) { dt; args; }

    protected log(...args: any[]) {
        console.log(`[${this.ecsName}] [log]`, ...args);
    }
    protected warn(...args: any[]) {
        console.warn(`[${this.ecsName}] [warn]`, ...args);
    }
    protected error(...args: any[]) {
        console.error(`[${this.ecsName}] [error]`, ...args);
    }
}