import { EcsBaseComponent, IComponent, IEntity, ecsclass } from '../util/EcsObject';

@ecsclass('EcsComponent')
export class EcsComponent<E extends IEntity = IEntity> extends EcsBaseComponent implements IComponent {
    /**
     * 是否有效
     */
    private _isValid = false;
    public get isValid() {
        return this._isValid;
    }
    private set isValid(value) {
        this._isValid = value;
    }

    private _enabled = true;
    /**标记是否生效 */
    public get enabled() {
        return this._enabled;
    }
    public set enabled(value) {
        this._enabled = value;
    }

    /**
     * 当前组件所在的实体
     */
    private _entity: E = null;
    public get entity() {
        return this._entity;
    }
    private set entity(value) {
        this._entity = value;
    }

    /**
     * 当前组件的标签
     */
    private _tag: number | null = null;
    public get tag() {
        return this._tag;
    }
    private set tag(value) {
        this._tag = value;
    }

    /**
     * 内部生效函数
     */
    protected innerEnable(entity: E, tag: number | null = null) {
        this.isValid = true;
        this.enabled = true;
        this.entity = entity;
        this.tag = tag;
        this.beforeEnable();
        this.onEnable();
    }

    /**
     * 内部失效函数
     */
    protected innerDisable() {
        this.onDisable();
        this.isValid = false;
        this.entity = null;
        this.tag = 0;
    }

    /**
     * 组件生效之前
     */
    private beforeEnable() {
        const ctor = (this.constructor as typeof EcsBaseComponent);
        ctor.requires.forEach(Component => {
            if (!this.entity.hasComponent(Component)) {
                this.entity.addComponent(Component);
            }
        });
    }

    /**
     * 组件生效
     */
    protected onEnable() { }

    /**
     * 组件失效
     */
    protected onDisable() { }

    /**
     * 销毁
     * @param target 权柄
     */
    public destroy(target?: any): boolean {
        if (!this.entity) return false;
        return this.entity.removeComponent(this, target);
    }

    protected log(...args: any[]) {
        console.log(`[${this.ecsName}] [log]`, ...args);
    }
    protected warn(...args: any[]) {
        console.warn(`[${this.ecsName}] [warn]`, ...args);
    }
    protected error(...args: any[]) {
        console.error(`[${this.ecsName}] [error]`, ...args);
    }
}
