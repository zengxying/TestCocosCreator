import { v2, v3 } from 'cc';
import { IEntity, ecsclass } from '../../util/EcsObject';
import { AttrComponent, IAttrReadonly } from './AttrComponent';

export interface INodeReadonly extends IAttrReadonly {
    readonly lastX: number
    readonly lastY: number
    readonly lastZ: number
    readonly lastScaleX: number
    readonly lastScaleY: number
    readonly lastScaleZ: number
    readonly lastAnchorX: number
    readonly lastAnchorY: number
    readonly lastWidth: number
    readonly lastHeight: number
    readonly lastMinX: number
    readonly lastMinY: number
    readonly lastMaxX: number
    readonly lastMaxY: number
}

@ecsclass('NodeComponent')
/**
 * 负责位置、尺寸、缩放、透明度、锚点、显隐、旋转
 */
export class NodeComponent<T extends IEntity = IEntity> extends AttrComponent<T> {
    static allowRecycling: boolean = true;

    public reset() {
        super.reset();
        this._lastX = null;
        this._lastY = null;
        this._lastZ = null;
        this._lastScaleX = null;
        this._lastScaleY = null;
        this._lastScaleZ = null;
        this._lastAnchorX = null;
        this._lastAnchorY = null;
        this._lastWidth = null;
        this._lastHeight = null;
    }

    /**上一帧x坐标 */
    private _lastX: number = null;
    public get lastX(): number {
        if (this._lastX === null) return this.x;
        return this._lastX;
    }
    /**上一帧y坐标 */
    private _lastY: number = null;
    public get lastY(): number {
        if (this._lastY === null) return this.y;
        return this._lastY;
    }
    /**上一帧z坐标 */
    private _lastZ: number = null;
    public get lastZ(): number {
        if (this._lastZ === null) return this.z;
        return this._lastZ;
    }

    /**上一帧缩放x */
    private _lastScaleX: number = null;
    public get lastScaleX(): number {
        if (this._lastScaleX === null) return this.scaleX;
        return this._lastScaleX;
    }
    /**上一帧缩放y */
    private _lastScaleY: number = null;
    public get lastScaleY(): number {
        if (this._lastScaleY === null) return this.scaleY;
        return this._lastScaleY;
    }
    /**上一帧缩放z */
    private _lastScaleZ: number = null;
    public get lastScaleZ(): number {
        if (this._lastScaleZ === null) return this.scaleZ;
        return this._lastScaleZ;
    }

    /**上一帧锚点x */
    private _lastAnchorX: number = null;
    public get lastAnchorX(): number {
        if (this._lastAnchorX === null) return this.anchorX;
        return this._lastAnchorX;
    }
    /**上一帧锚点y */
    private _lastAnchorY: number = null;
    public get lastAnchorY(): number {
        if (this._lastAnchorY === null) return this.anchorY;
        return this._lastAnchorY;
    }

    /**上一帧宽 */
    private _lastWidth: number = null;
    public get lastWidth(): number {
        if (this._lastWidth === null) return this.width;
        return this._lastWidth;
    }
    /**上一帧高 */
    private _lastHeight: number = null;
    public get lastHeight(): number {
        if (this._lastHeight === null) return this.height;
        return this._lastHeight;
    }

    /**上一帧最小x坐标(不计算旋转) */
    get lastMinX() {
        return this.lastX - this.lastWidth * this.lastAnchorX * this.lastScaleX;
    }
    /**上一帧最小y坐标(不计算旋转) */
    get lastMinY() {
        return this.lastY - this.lastHeight * this.lastAnchorY * this.lastScaleY;
    }
    /**上一帧最大x坐标(不计算旋转) */
    get lastMaxX() {
        return this.lastX + this.lastWidth * (1 - this.lastAnchorX) * this.lastScaleX;
    }
    /**上一帧最大y坐标(不计算旋转) */
    get lastMaxY() {
        return this.lastY + this.lastHeight * (1 - this.lastAnchorY) * this.lastScaleY;
    }

    /**
     * 获取上一帧到当前帧的移动量
     */
    public getMovement() {
        return v3(
            this.x - this.lastX,
            this.y - this.lastY,
            this.z - this.lastZ
        );
    }

    /**
     * 获取上一帧到当前帧的移动量
     */
    public getMovementXY() {
        return v2(
            this.x - this.lastX,
            this.y - this.lastY
        );
    }

    /**
     * 获取上一帧到当前帧的移动量
     */
    public getMovementX() {
        return this.x - this.lastX;
    }

    /**
     * 获取上一帧到当前帧的移动量
     */
    public getMovementY() {
        return this.y - this.lastY;
    }

    /**
     * 获取上一帧到当前帧的移动量
     */
    public getMovementZ() {
        return this.z - this.lastZ;
    }

    /**
     * 获取相上一帧到当前帧，对于other的移动量
     */
    public getRelativeMovement(other: NodeComponent) {
        return v3(
            (this.x - this.lastX) - (other.x - other.lastX),
            (this.y - this.lastY) - (other.y - other.lastY),
            (this.z - this.lastZ) - (other.z - other.lastZ)
        );
    }

    /**
     * 获取相上一帧到当前帧，对于other的移动量
     */
    public getRelativeMovementXY(other: NodeComponent) {
        return v2(
            (this.x - this.lastX) - (other.x - other.lastX),
            (this.y - this.lastY) - (other.y - other.lastY)
        );
    }

    /**
     * 获取相上一帧到当前帧，对于other的移动量
     */
    public getRelativeMovementX(other: NodeComponent) {
        return (this.x - this.lastX) - (other.x - other.lastX);
    }

    /**
    * 获取相上一帧到当前帧，对于other的移动量
    */
    public getRelativeMovementY(other: NodeComponent) {
        return (this.y - this.lastY) - (other.y - other.lastY);
    }

    /**
     * 获取相上一帧到当前帧，对于other的移动量
     */
    public getRelativeMovementZ(other: NodeComponent) {
        return (this.z - this.lastZ) - (other.z - other.lastZ);
    }

    /**************************以下为系统调用**************************/
    static innerHandle(node: NodeComponent) {
        //更新记录上一帧信息
        node._lastX = node.x;
        node._lastY = node.y;
        node._lastZ = node.z;
        node._lastScaleX = node.scaleX;
        node._lastScaleY = node.scaleY;
        node._lastScaleZ = node.scaleZ;
        node._lastAnchorX = node.anchorX;
        node._lastAnchorY = node.anchorY;
        node._lastWidth = node.width;
        node._lastHeight = node.height;
    }
}